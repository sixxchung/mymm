{"env_info": "sys.platform: linux\nPython: 3.8.12 | packaged by conda-forge | (default, Jan 30 2022, 23:42:07) [GCC 9.4.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA A100-SXM4-40GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.6.r11.6/compiler.30794723_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.2\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.3\nOpenCV: 4.5.5\nMMCV: 1.4.4\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.21.0+32d46ab", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=4,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'KittyTinyDataset'\ndata_root = '/home/oschung_skcc/git/mymm/kitty_tiny'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='KittyTinyDataset',\n        ann_file='data/train.txt',\n        img_prefix='data/image_2',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/kitty_tiny'),\n    val=dict(\n        type='KittyTinyDataset',\n        ann_file='data/valid.txt',\n        img_prefix='data/image_2',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/kitty_tiny'),\n    test=dict(\n        type='KittyTinyDataset',\n        ann_file='data/valid.txt',\n        img_prefix='data/image_2',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/kitty_tiny'))\nevaluation = dict(interval=12, metric='mAP')\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup=None,\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=12)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/oschung_skcc/git/mymm/kitty_tiny/checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nwork_dir = '/home/oschung_skcc/git/mymm/kitty_tiny/tutorial_exps'\nseed = 0\ngpu_ids = [0]\nauto_resume = False\n", "seed": 1186259037, "exp_name": "faster_rcnn_r50_fpn_1x_tidy.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.0025, "memory": 2052, "data_time": 0.23194, "loss_rpn_cls": 0.04172, "loss_rpn_bbox": 0.01832, "loss_cls": 0.78468, "acc": 81.70898, "loss_bbox": 0.4538, "loss": 1.29852, "time": 0.47701}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0025, "memory": 2052, "data_time": 0.00674, "loss_rpn_cls": 0.01302, "loss_rpn_bbox": 0.01091, "loss_cls": 0.24012, "acc": 92.27539, "loss_bbox": 0.31147, "loss": 0.57552, "time": 0.13816}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.0025, "memory": 2052, "data_time": 0.2315, "loss_rpn_cls": 0.01681, "loss_rpn_bbox": 0.01713, "loss_cls": 0.19439, "acc": 93.99414, "loss_bbox": 0.32432, "loss": 0.55264, "time": 0.37299}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.0025, "memory": 2052, "data_time": 0.00706, "loss_rpn_cls": 0.01284, "loss_rpn_bbox": 0.01193, "loss_cls": 0.17737, "acc": 94.24805, "loss_bbox": 0.25102, "loss": 0.45316, "time": 0.1411}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.0025, "memory": 2052, "data_time": 0.23292, "loss_rpn_cls": 0.01164, "loss_rpn_bbox": 0.01666, "loss_cls": 0.20008, "acc": 92.4707, "loss_bbox": 0.28919, "loss": 0.51758, "time": 0.35128}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.0025, "memory": 2052, "data_time": 0.00505, "loss_rpn_cls": 0.00891, "loss_rpn_bbox": 0.01361, "loss_cls": 0.15937, "acc": 94.25781, "loss_bbox": 0.22923, "loss": 0.41112, "time": 0.08466}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.0025, "memory": 2052, "data_time": 0.22437, "loss_rpn_cls": 0.00549, "loss_rpn_bbox": 0.01166, "loss_cls": 0.13841, "acc": 94.58984, "loss_bbox": 0.22265, "loss": 0.3782, "time": 0.30858}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.0025, "memory": 2052, "data_time": 0.00499, "loss_rpn_cls": 0.00548, "loss_rpn_bbox": 0.0148, "loss_cls": 0.14459, "acc": 94.92188, "loss_bbox": 0.22774, "loss": 0.39262, "time": 0.08525}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.0025, "memory": 2052, "data_time": 0.23266, "loss_rpn_cls": 0.00418, "loss_rpn_bbox": 0.01289, "loss_cls": 0.13185, "acc": 95.0293, "loss_bbox": 0.22724, "loss": 0.37617, "time": 0.31876}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.0025, "memory": 2052, "data_time": 0.00479, "loss_rpn_cls": 0.00478, "loss_rpn_bbox": 0.01256, "loss_cls": 0.13434, "acc": 94.87305, "loss_bbox": 0.22398, "loss": 0.37565, "time": 0.11854}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.0025, "memory": 2052, "data_time": 0.22969, "loss_rpn_cls": 0.00213, "loss_rpn_bbox": 0.00881, "loss_cls": 0.0897, "acc": 96.71875, "loss_bbox": 0.17193, "loss": 0.27257, "time": 0.53646}
{"mode": "train", "epoch": 6, "iter": 20, "lr": 0.0025, "memory": 2052, "data_time": 0.00608, "loss_rpn_cls": 0.00452, "loss_rpn_bbox": 0.01112, "loss_cls": 0.11539, "acc": 95.61523, "loss_bbox": 0.19879, "loss": 0.32982, "time": 0.2821}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.0025, "memory": 2052, "data_time": 0.23695, "loss_rpn_cls": 0.00262, "loss_rpn_bbox": 0.01285, "loss_cls": 0.11186, "acc": 95.86914, "loss_bbox": 0.22044, "loss": 0.34776, "time": 0.46358}
{"mode": "train", "epoch": 7, "iter": 20, "lr": 0.0025, "memory": 2052, "data_time": 0.0056, "loss_rpn_cls": 0.00116, "loss_rpn_bbox": 0.00674, "loss_cls": 0.0762, "acc": 97.12891, "loss_bbox": 0.14002, "loss": 0.22412, "time": 0.21124}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.0025, "memory": 2052, "data_time": 0.23319, "loss_rpn_cls": 0.00128, "loss_rpn_bbox": 0.00799, "loss_cls": 0.07522, "acc": 97.10938, "loss_bbox": 0.12868, "loss": 0.21317, "time": 0.45261}
{"mode": "train", "epoch": 8, "iter": 20, "lr": 0.0025, "memory": 2052, "data_time": 0.00682, "loss_rpn_cls": 0.0024, "loss_rpn_bbox": 0.01061, "loss_cls": 0.0979, "acc": 95.98633, "loss_bbox": 0.21742, "loss": 0.32833, "time": 0.2439}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.00025, "memory": 2052, "data_time": 0.23463, "loss_rpn_cls": 0.00198, "loss_rpn_bbox": 0.00895, "loss_cls": 0.07907, "acc": 97.10938, "loss_bbox": 0.16877, "loss": 0.25878, "time": 0.44594}
{"mode": "train", "epoch": 9, "iter": 20, "lr": 0.00025, "memory": 2052, "data_time": 0.0082, "loss_rpn_cls": 0.00205, "loss_rpn_bbox": 0.00974, "loss_cls": 0.07647, "acc": 97.10938, "loss_bbox": 0.15928, "loss": 0.24754, "time": 0.20775}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.00025, "memory": 2052, "data_time": 0.23569, "loss_rpn_cls": 0.00372, "loss_rpn_bbox": 0.01089, "loss_cls": 0.08329, "acc": 96.9043, "loss_bbox": 0.17065, "loss": 0.26855, "time": 0.47321}
{"mode": "train", "epoch": 10, "iter": 20, "lr": 0.00025, "memory": 2052, "data_time": 0.00535, "loss_rpn_cls": 0.00232, "loss_rpn_bbox": 0.00792, "loss_cls": 0.08032, "acc": 96.98242, "loss_bbox": 0.15174, "loss": 0.2423, "time": 0.24591}
{"mode": "train", "epoch": 11, "iter": 10, "lr": 0.00025, "memory": 2052, "data_time": 0.23141, "loss_rpn_cls": 0.00278, "loss_rpn_bbox": 0.00935, "loss_cls": 0.08974, "acc": 96.5625, "loss_bbox": 0.17674, "loss": 0.27862, "time": 0.51371}
{"mode": "train", "epoch": 11, "iter": 20, "lr": 0.00025, "memory": 2052, "data_time": 0.00725, "loss_rpn_cls": 0.00236, "loss_rpn_bbox": 0.00875, "loss_cls": 0.07191, "acc": 97.32422, "loss_bbox": 0.13805, "loss": 0.22108, "time": 0.18372}
{"mode": "train", "epoch": 12, "iter": 10, "lr": 3e-05, "memory": 2052, "data_time": 0.22446, "loss_rpn_cls": 0.0035, "loss_rpn_bbox": 0.00792, "loss_cls": 0.07079, "acc": 97.33398, "loss_bbox": 0.1421, "loss": 0.22432, "time": 0.40612}
{"mode": "train", "epoch": 12, "iter": 20, "lr": 3e-05, "memory": 2052, "data_time": 0.00588, "loss_rpn_cls": 0.00318, "loss_rpn_bbox": 0.01, "loss_cls": 0.08728, "acc": 96.66992, "loss_bbox": 0.1617, "loss": 0.26216, "time": 0.2227}
{"mode": "val", "epoch": 12, "iter": 25, "lr": 3e-05, "AP50": 0.559, "mAP": 0.55937}
