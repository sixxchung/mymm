{"env_info": "sys.platform: linux\nPython: 3.8.12 | packaged by conda-forge | (default, Jan 30 2022, 23:42:07) [GCC 9.4.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA A100-SXM4-40GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.6.r11.6/compiler.30794723_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.2\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.3\nOpenCV: 4.5.5\nMMCV: 1.4.4\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.21.0+32d46ab", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=4,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'KittyTinyDataset'\ndata_root = '/home/oschung_skcc/git/mymm/kitty_tiny'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='KittyTinyDataset',\n        ann_file='data/train.txt',\n        img_prefix='data/image_2',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/kitty_tiny'),\n    val=dict(\n        type='KittyTinyDataset',\n        ann_file='data/valid.txt',\n        img_prefix='data/image_2',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/kitty_tiny'),\n    test=dict(\n        type='KittyTinyDataset',\n        ann_file='data/valid.txt',\n        img_prefix='data/image_2',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/kitty_tiny'))\nevaluation = dict(interval=12, metric='mAP')\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup=None,\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=12)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/oschung_skcc/git/mymm/kitty_tiny/checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nwork_dir = '/home/oschung_skcc/git/mymm/kitty_tiny/tutorial_exps'\nseed = 0\ngpu_ids = [0]\nauto_resume = False\n", "seed": 1738535551, "exp_name": "faster_rcnn_r50_fpn_1x_tidy.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.0025, "memory": 2049, "data_time": 0.22545, "loss_rpn_cls": 0.02441, "loss_rpn_bbox": 0.01361, "loss_cls": 0.72203, "acc": 77.35352, "loss_bbox": 0.32753, "loss": 1.08757, "time": 0.39323}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0025, "memory": 2049, "data_time": 0.00851, "loss_rpn_cls": 0.03824, "loss_rpn_bbox": 0.01929, "loss_cls": 0.33982, "acc": 89.16992, "loss_bbox": 0.42401, "loss": 0.82136, "time": 0.09527}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.0025, "memory": 2049, "data_time": 0.2329, "loss_rpn_cls": 0.01356, "loss_rpn_bbox": 0.01637, "loss_cls": 0.22066, "acc": 93.125, "loss_bbox": 0.34439, "loss": 0.59498, "time": 0.32429}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.0025, "memory": 2049, "data_time": 0.00596, "loss_rpn_cls": 0.00479, "loss_rpn_bbox": 0.01197, "loss_cls": 0.13141, "acc": 95.43945, "loss_bbox": 0.20645, "loss": 0.35461, "time": 0.08543}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.0025, "memory": 2049, "data_time": 0.22854, "loss_rpn_cls": 0.00781, "loss_rpn_bbox": 0.00947, "loss_cls": 0.13018, "acc": 95.48828, "loss_bbox": 0.19491, "loss": 0.34237, "time": 0.316}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.0025, "memory": 2049, "data_time": 0.0052, "loss_rpn_cls": 0.0074, "loss_rpn_bbox": 0.0157, "loss_cls": 0.1837, "acc": 93.62305, "loss_bbox": 0.25451, "loss": 0.46131, "time": 0.08412}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.0025, "memory": 2049, "data_time": 0.22966, "loss_rpn_cls": 0.00463, "loss_rpn_bbox": 0.01338, "loss_cls": 0.12952, "acc": 95.12695, "loss_bbox": 0.20786, "loss": 0.35538, "time": 0.31593}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.0025, "memory": 2049, "data_time": 0.00565, "loss_rpn_cls": 0.00544, "loss_rpn_bbox": 0.01104, "loss_cls": 0.16234, "acc": 94.15039, "loss_bbox": 0.23888, "loss": 0.4177, "time": 0.08416}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.0025, "memory": 2049, "data_time": 0.2306, "loss_rpn_cls": 0.00433, "loss_rpn_bbox": 0.0107, "loss_cls": 0.1133, "acc": 95.98633, "loss_bbox": 0.18044, "loss": 0.30878, "time": 0.3159}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.0025, "memory": 2049, "data_time": 0.00588, "loss_rpn_cls": 0.00367, "loss_rpn_bbox": 0.01342, "loss_cls": 0.14914, "acc": 94.3457, "loss_bbox": 0.24606, "loss": 0.41229, "time": 0.08205}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.0025, "memory": 2049, "data_time": 0.23166, "loss_rpn_cls": 0.00326, "loss_rpn_bbox": 0.01188, "loss_cls": 0.13308, "acc": 94.89258, "loss_bbox": 0.21673, "loss": 0.36494, "time": 0.31674}
{"mode": "train", "epoch": 6, "iter": 20, "lr": 0.0025, "memory": 2049, "data_time": 0.00567, "loss_rpn_cls": 0.00225, "loss_rpn_bbox": 0.0097, "loss_cls": 0.09588, "acc": 96.31836, "loss_bbox": 0.17586, "loss": 0.28368, "time": 0.08486}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.0025, "memory": 2049, "data_time": 0.22912, "loss_rpn_cls": 0.00137, "loss_rpn_bbox": 0.00945, "loss_cls": 0.08815, "acc": 96.68945, "loss_bbox": 0.16315, "loss": 0.26212, "time": 0.31895}
{"mode": "train", "epoch": 7, "iter": 20, "lr": 0.0025, "memory": 2049, "data_time": 0.00515, "loss_rpn_cls": 0.00267, "loss_rpn_bbox": 0.01179, "loss_cls": 0.11963, "acc": 95.32227, "loss_bbox": 0.19583, "loss": 0.32991, "time": 0.08432}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.0025, "memory": 2049, "data_time": 0.22973, "loss_rpn_cls": 0.0021, "loss_rpn_bbox": 0.01001, "loss_cls": 0.09617, "acc": 96.26953, "loss_bbox": 0.18392, "loss": 0.2922, "time": 0.31521}
{"mode": "train", "epoch": 8, "iter": 20, "lr": 0.0025, "memory": 2049, "data_time": 0.00574, "loss_rpn_cls": 0.00251, "loss_rpn_bbox": 0.01408, "loss_cls": 0.10825, "acc": 95.72266, "loss_bbox": 0.20588, "loss": 0.33072, "time": 0.08341}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.00025, "memory": 2049, "data_time": 0.22771, "loss_rpn_cls": 0.0012, "loss_rpn_bbox": 0.01004, "loss_cls": 0.08204, "acc": 97.02148, "loss_bbox": 0.16665, "loss": 0.25993, "time": 0.30743}
{"mode": "train", "epoch": 9, "iter": 20, "lr": 0.00025, "memory": 2049, "data_time": 0.00515, "loss_rpn_cls": 0.00215, "loss_rpn_bbox": 0.01067, "loss_cls": 0.09153, "acc": 96.35742, "loss_bbox": 0.16751, "loss": 0.27187, "time": 0.08086}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.00025, "memory": 2049, "data_time": 0.23175, "loss_rpn_cls": 0.00193, "loss_rpn_bbox": 0.01128, "loss_cls": 0.08932, "acc": 96.50391, "loss_bbox": 0.16538, "loss": 0.26792, "time": 0.32193}
{"mode": "train", "epoch": 10, "iter": 20, "lr": 0.00025, "memory": 2049, "data_time": 0.00608, "loss_rpn_cls": 0.00292, "loss_rpn_bbox": 0.00783, "loss_cls": 0.08018, "acc": 97.04102, "loss_bbox": 0.14101, "loss": 0.23195, "time": 0.08682}
{"mode": "train", "epoch": 11, "iter": 10, "lr": 0.00025, "memory": 2049, "data_time": 0.22934, "loss_rpn_cls": 0.00243, "loss_rpn_bbox": 0.0055, "loss_cls": 0.06233, "acc": 97.68555, "loss_bbox": 0.11317, "loss": 0.18343, "time": 0.31627}
{"mode": "train", "epoch": 11, "iter": 20, "lr": 0.00025, "memory": 2049, "data_time": 0.0051, "loss_rpn_cls": 0.0026, "loss_rpn_bbox": 0.00975, "loss_cls": 0.08954, "acc": 96.40625, "loss_bbox": 0.15856, "loss": 0.26045, "time": 0.08286}
{"mode": "train", "epoch": 12, "iter": 10, "lr": 3e-05, "memory": 2049, "data_time": 0.22676, "loss_rpn_cls": 0.00194, "loss_rpn_bbox": 0.00914, "loss_cls": 0.07772, "acc": 97.00195, "loss_bbox": 0.14412, "loss": 0.23292, "time": 0.30699}
{"mode": "train", "epoch": 12, "iter": 20, "lr": 3e-05, "memory": 2049, "data_time": 0.00536, "loss_rpn_cls": 0.002, "loss_rpn_bbox": 0.00712, "loss_cls": 0.06428, "acc": 97.4707, "loss_bbox": 0.12313, "loss": 0.19653, "time": 0.07772}
{"mode": "val", "epoch": 12, "iter": 25, "lr": 3e-05, "AP50": 0.549, "mAP": 0.54854}
