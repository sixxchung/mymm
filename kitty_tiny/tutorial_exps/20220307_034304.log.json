{"env_info": "sys.platform: linux\nPython: 3.8.12 | packaged by conda-forge | (default, Jan 30 2022, 23:42:07) [GCC 9.4.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA A100-SXM4-40GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.6.r11.6/compiler.30794723_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.2\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.3\nOpenCV: 4.5.5\nMMCV: 1.4.4\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.21.0+32d46ab", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=4,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'KittyTinyDataset'\ndata_root = '/home/oschung_skcc/git/mymm/kitty_tiny'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='KittyTinyDataset',\n        ann_file='data/train.txt',\n        img_prefix='data/image_2',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/kitty_tiny'),\n    val=dict(\n        type='KittyTinyDataset',\n        ann_file='data/valid.txt',\n        img_prefix='data/image_2',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/kitty_tiny'),\n    test=dict(\n        type='KittyTinyDataset',\n        ann_file='data/valid.txt',\n        img_prefix='data/image_2',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/kitty_tiny'))\nevaluation = dict(interval=12, metric='mAP')\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup=None,\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=12)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/oschung_skcc/git/mymm/kitty_tiny/checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nwork_dir = '/home/oschung_skcc/git/mymm/kitty_tiny/tutorial_exps'\nseed = 0\ngpu_ids = [0]\nauto_resume = False\n", "seed": 526729873, "exp_name": "faster_rcnn_r50_fpn_1x_tidy.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.0025, "memory": 2053, "data_time": 0.2264, "loss_rpn_cls": 0.02968, "loss_rpn_bbox": 0.01483, "loss_cls": 0.73966, "acc": 80.10742, "loss_bbox": 0.38283, "loss": 1.167, "time": 0.48047}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0025, "memory": 2053, "data_time": 0.00576, "loss_rpn_cls": 0.02642, "loss_rpn_bbox": 0.02017, "loss_cls": 0.32897, "acc": 90.67383, "loss_bbox": 0.37666, "loss": 0.75222, "time": 0.13163}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.0025, "memory": 2053, "data_time": 0.2325, "loss_rpn_cls": 0.01756, "loss_rpn_bbox": 0.01648, "loss_cls": 0.20596, "acc": 92.95898, "loss_bbox": 0.34523, "loss": 0.58523, "time": 0.36789}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.0025, "memory": 2054, "data_time": 0.00595, "loss_rpn_cls": 0.00984, "loss_rpn_bbox": 0.0169, "loss_cls": 0.21373, "acc": 93.26172, "loss_bbox": 0.31121, "loss": 0.55168, "time": 0.13251}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.0025, "memory": 2054, "data_time": 0.2253, "loss_rpn_cls": 0.00938, "loss_rpn_bbox": 0.01025, "loss_cls": 0.1271, "acc": 95.71289, "loss_bbox": 0.18874, "loss": 0.33547, "time": 0.35987}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.0025, "memory": 2054, "data_time": 0.00652, "loss_rpn_cls": 0.00896, "loss_rpn_bbox": 0.0163, "loss_cls": 0.19573, "acc": 92.85156, "loss_bbox": 0.28911, "loss": 0.51011, "time": 0.13957}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.0025, "memory": 2054, "data_time": 0.22755, "loss_rpn_cls": 0.00795, "loss_rpn_bbox": 0.01352, "loss_cls": 0.14891, "acc": 94.27734, "loss_bbox": 0.22113, "loss": 0.39152, "time": 0.3743}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.0025, "memory": 2054, "data_time": 0.00545, "loss_rpn_cls": 0.00273, "loss_rpn_bbox": 0.01059, "loss_cls": 0.1289, "acc": 95.19531, "loss_bbox": 0.20179, "loss": 0.34401, "time": 0.14002}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.0025, "memory": 2054, "data_time": 0.22754, "loss_rpn_cls": 0.00608, "loss_rpn_bbox": 0.01406, "loss_cls": 0.12327, "acc": 95.46875, "loss_bbox": 0.2197, "loss": 0.3631, "time": 0.36791}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.0025, "memory": 2054, "data_time": 0.00521, "loss_rpn_cls": 0.00211, "loss_rpn_bbox": 0.01071, "loss_cls": 0.12117, "acc": 95.22461, "loss_bbox": 0.19734, "loss": 0.33133, "time": 0.13606}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.0025, "memory": 2054, "data_time": 0.23116, "loss_rpn_cls": 0.00383, "loss_rpn_bbox": 0.01151, "loss_cls": 0.11561, "acc": 95.49805, "loss_bbox": 0.21728, "loss": 0.34824, "time": 0.37286}
{"mode": "train", "epoch": 6, "iter": 20, "lr": 0.0025, "memory": 2054, "data_time": 0.00684, "loss_rpn_cls": 0.00457, "loss_rpn_bbox": 0.00908, "loss_cls": 0.10495, "acc": 96.36719, "loss_bbox": 0.1869, "loss": 0.30549, "time": 0.13591}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.0025, "memory": 2054, "data_time": 0.23209, "loss_rpn_cls": 0.00215, "loss_rpn_bbox": 0.01058, "loss_cls": 0.11277, "acc": 95.78125, "loss_bbox": 0.21139, "loss": 0.33688, "time": 0.3764}
{"mode": "train", "epoch": 7, "iter": 20, "lr": 0.0025, "memory": 2054, "data_time": 0.00755, "loss_rpn_cls": 0.00114, "loss_rpn_bbox": 0.00924, "loss_cls": 0.07424, "acc": 97.13867, "loss_bbox": 0.15544, "loss": 0.24007, "time": 0.14285}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.0025, "memory": 2054, "data_time": 0.23168, "loss_rpn_cls": 0.00201, "loss_rpn_bbox": 0.0087, "loss_cls": 0.09947, "acc": 96.51367, "loss_bbox": 0.18855, "loss": 0.29874, "time": 0.36757}
{"mode": "train", "epoch": 8, "iter": 20, "lr": 0.0025, "memory": 2054, "data_time": 0.00728, "loss_rpn_cls": 0.00281, "loss_rpn_bbox": 0.0087, "loss_cls": 0.08051, "acc": 96.89453, "loss_bbox": 0.17316, "loss": 0.26518, "time": 0.13624}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.00025, "memory": 2054, "data_time": 0.22867, "loss_rpn_cls": 0.00094, "loss_rpn_bbox": 0.00595, "loss_cls": 0.05904, "acc": 97.80273, "loss_bbox": 0.12924, "loss": 0.19516, "time": 0.36835}
{"mode": "train", "epoch": 9, "iter": 20, "lr": 0.00025, "memory": 2054, "data_time": 0.00541, "loss_rpn_cls": 0.0022, "loss_rpn_bbox": 0.01071, "loss_cls": 0.09005, "acc": 96.76758, "loss_bbox": 0.17241, "loss": 0.27537, "time": 0.13849}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.00025, "memory": 2054, "data_time": 0.23288, "loss_rpn_cls": 0.00468, "loss_rpn_bbox": 0.00746, "loss_cls": 0.07513, "acc": 97.40234, "loss_bbox": 0.1391, "loss": 0.22636, "time": 0.39215}
{"mode": "train", "epoch": 10, "iter": 20, "lr": 0.00025, "memory": 2054, "data_time": 0.00733, "loss_rpn_cls": 0.00079, "loss_rpn_bbox": 0.0063, "loss_cls": 0.07202, "acc": 97.02148, "loss_bbox": 0.14799, "loss": 0.22711, "time": 0.13859}
{"mode": "train", "epoch": 11, "iter": 10, "lr": 0.00025, "memory": 2054, "data_time": 0.22905, "loss_rpn_cls": 0.00312, "loss_rpn_bbox": 0.00945, "loss_cls": 0.07874, "acc": 96.99219, "loss_bbox": 0.14717, "loss": 0.23848, "time": 0.3424}
{"mode": "train", "epoch": 11, "iter": 20, "lr": 0.00025, "memory": 2054, "data_time": 0.00494, "loss_rpn_cls": 0.00106, "loss_rpn_bbox": 0.00615, "loss_cls": 0.07026, "acc": 97.34375, "loss_bbox": 0.13276, "loss": 0.21023, "time": 0.08384}
{"mode": "train", "epoch": 12, "iter": 10, "lr": 3e-05, "memory": 2054, "data_time": 0.23072, "loss_rpn_cls": 0.00151, "loss_rpn_bbox": 0.00584, "loss_cls": 0.07103, "acc": 97.2168, "loss_bbox": 0.13755, "loss": 0.21594, "time": 0.32735}
{"mode": "train", "epoch": 12, "iter": 20, "lr": 3e-05, "memory": 2054, "data_time": 0.00466, "loss_rpn_cls": 0.00214, "loss_rpn_bbox": 0.00997, "loss_cls": 0.08587, "acc": 96.72852, "loss_bbox": 0.15899, "loss": 0.25697, "time": 0.08403}
{"mode": "val", "epoch": 12, "iter": 25, "lr": 3e-05, "AP50": 0.528, "mAP": 0.52769}
