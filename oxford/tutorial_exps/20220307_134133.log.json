{"env_info": "sys.platform: linux\nPython: 3.8.12 | packaged by conda-forge | (default, Jan 30 2022, 23:42:07) [GCC 9.4.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA A100-SXM4-40GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.6.r11.6/compiler.30794723_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.2\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.3\nOpenCV: 4.5.5\nMMCV: 1.4.4\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.21.0+32d46ab", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=37,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'OxfordDataset'\ndata_root = '/home/oschung_skcc/git/mymm/oxford'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='OxfordDataset',\n        ann_file='data/train.txt',\n        img_prefix='data/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/oxford'),\n    val=dict(\n        type='OxfordDataset',\n        ann_file='data/valid.txt',\n        img_prefix='data/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/oxford'),\n    test=dict(\n        type='OxfordDataset',\n        ann_file='data/test.txt',\n        img_prefix='data/images',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        data_root='/home/oschung_skcc/git/mymm/oxford'))\nevaluation = dict(interval=12, metric='mAP')\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup=None,\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=12)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/oschung_skcc/git/mymm/oxford/checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nwork_dir = '/home/oschung_skcc/git/mymm/oxford/tutorial_exps'\nseed = 0\ngpu_ids = [0]\nauto_resume = False\n", "seed": 285481067, "exp_name": "faster_rcnn_r50_fpn_1x_oxford.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.0025, "memory": 3200, "data_time": 0.2327, "loss_rpn_cls": 0.00586, "loss_rpn_bbox": 0.00863, "loss_cls": 1.3236, "acc": 81.68945, "loss_bbox": 0.1289, "loss": 1.46699, "time": 0.51102}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0025, "memory": 3201, "data_time": 0.00728, "loss_rpn_cls": 0.01432, "loss_rpn_bbox": 0.00643, "loss_cls": 0.35912, "acc": 96.21094, "loss_bbox": 0.15034, "loss": 0.53022, "time": 0.17248}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.0025, "memory": 3467, "data_time": 0.00718, "loss_rpn_cls": 0.02456, "loss_rpn_bbox": 0.0107, "loss_cls": 0.23472, "acc": 96.14258, "loss_bbox": 0.15884, "loss": 0.42883, "time": 0.16918}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.0025, "memory": 3467, "data_time": 0.00705, "loss_rpn_cls": 0.00461, "loss_rpn_bbox": 0.00624, "loss_cls": 0.24456, "acc": 95.6543, "loss_bbox": 0.17411, "loss": 0.42951, "time": 0.1655}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0025, "memory": 3467, "data_time": 0.00652, "loss_rpn_cls": 0.00437, "loss_rpn_bbox": 0.0109, "loss_cls": 0.23269, "acc": 95.63477, "loss_bbox": 0.18043, "loss": 0.42838, "time": 0.19833}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.0025, "memory": 3467, "data_time": 0.00706, "loss_rpn_cls": 0.00569, "loss_rpn_bbox": 0.00727, "loss_cls": 0.22511, "acc": 95.81055, "loss_bbox": 0.17065, "loss": 0.40872, "time": 0.16516}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 0.0025, "memory": 3467, "data_time": 0.00567, "loss_rpn_cls": 0.00559, "loss_rpn_bbox": 0.00503, "loss_cls": 0.19207, "acc": 96.01562, "loss_bbox": 0.15636, "loss": 0.35905, "time": 0.16776}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 0.0025, "memory": 3467, "data_time": 0.0069, "loss_rpn_cls": 0.00402, "loss_rpn_bbox": 0.00588, "loss_cls": 0.19328, "acc": 96.01562, "loss_bbox": 0.15449, "loss": 0.35767, "time": 0.17213}
{"mode": "train", "epoch": 1, "iter": 90, "lr": 0.0025, "memory": 3467, "data_time": 0.00713, "loss_rpn_cls": 0.00394, "loss_rpn_bbox": 0.00944, "loss_cls": 0.20583, "acc": 95.57617, "loss_bbox": 0.17773, "loss": 0.39695, "time": 0.16732}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0025, "memory": 3467, "data_time": 0.00601, "loss_rpn_cls": 0.00328, "loss_rpn_bbox": 0.00478, "loss_cls": 0.19914, "acc": 95.92773, "loss_bbox": 0.15883, "loss": 0.36603, "time": 0.16806}
{"mode": "train", "epoch": 1, "iter": 110, "lr": 0.0025, "memory": 3467, "data_time": 0.00705, "loss_rpn_cls": 0.00489, "loss_rpn_bbox": 0.00937, "loss_cls": 0.20583, "acc": 95.73242, "loss_bbox": 0.17276, "loss": 0.39284, "time": 0.16667}
{"mode": "train", "epoch": 1, "iter": 120, "lr": 0.0025, "memory": 3467, "data_time": 0.00664, "loss_rpn_cls": 0.00427, "loss_rpn_bbox": 0.00849, "loss_cls": 0.20482, "acc": 95.63477, "loss_bbox": 0.17366, "loss": 0.39125, "time": 0.16696}
{"mode": "train", "epoch": 1, "iter": 130, "lr": 0.0025, "memory": 3467, "data_time": 0.00701, "loss_rpn_cls": 0.00285, "loss_rpn_bbox": 0.00492, "loss_cls": 0.19998, "acc": 95.68359, "loss_bbox": 0.16741, "loss": 0.37516, "time": 0.16877}
{"mode": "train", "epoch": 1, "iter": 140, "lr": 0.0025, "memory": 3467, "data_time": 0.01051, "loss_rpn_cls": 0.00682, "loss_rpn_bbox": 0.00501, "loss_cls": 0.20405, "acc": 95.69336, "loss_bbox": 0.16692, "loss": 0.3828, "time": 0.18497}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0025, "memory": 3467, "data_time": 0.00777, "loss_rpn_cls": 0.00242, "loss_rpn_bbox": 0.00389, "loss_cls": 0.20719, "acc": 95.40039, "loss_bbox": 0.17894, "loss": 0.39244, "time": 0.17037}
{"mode": "train", "epoch": 1, "iter": 160, "lr": 0.0025, "memory": 3467, "data_time": 0.00727, "loss_rpn_cls": 0.00306, "loss_rpn_bbox": 0.00973, "loss_cls": 0.20677, "acc": 95.86914, "loss_bbox": 0.16238, "loss": 0.38193, "time": 0.17251}
{"mode": "train", "epoch": 1, "iter": 170, "lr": 0.0025, "memory": 3467, "data_time": 0.00728, "loss_rpn_cls": 0.00309, "loss_rpn_bbox": 0.00896, "loss_cls": 0.18895, "acc": 95.97656, "loss_bbox": 0.15571, "loss": 0.35671, "time": 0.16549}
{"mode": "train", "epoch": 1, "iter": 180, "lr": 0.0025, "memory": 3467, "data_time": 0.00718, "loss_rpn_cls": 0.00535, "loss_rpn_bbox": 0.0075, "loss_cls": 0.20102, "acc": 95.76172, "loss_bbox": 0.1663, "loss": 0.38017, "time": 0.16996}
{"mode": "train", "epoch": 1, "iter": 190, "lr": 0.0025, "memory": 3467, "data_time": 0.00651, "loss_rpn_cls": 0.00344, "loss_rpn_bbox": 0.00684, "loss_cls": 0.19605, "acc": 95.63477, "loss_bbox": 0.17025, "loss": 0.37658, "time": 0.16035}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0025, "memory": 3467, "data_time": 0.0071, "loss_rpn_cls": 0.0037, "loss_rpn_bbox": 0.00805, "loss_cls": 0.21019, "acc": 95.9082, "loss_bbox": 0.15813, "loss": 0.38007, "time": 0.16516}
{"mode": "train", "epoch": 1, "iter": 210, "lr": 0.0025, "memory": 3467, "data_time": 0.00738, "loss_rpn_cls": 0.00989, "loss_rpn_bbox": 0.00529, "loss_cls": 0.23498, "acc": 95.49805, "loss_bbox": 0.17271, "loss": 0.42287, "time": 0.16641}
{"mode": "train", "epoch": 1, "iter": 220, "lr": 0.0025, "memory": 3467, "data_time": 0.00838, "loss_rpn_cls": 0.00354, "loss_rpn_bbox": 0.00605, "loss_cls": 0.18019, "acc": 96.38672, "loss_bbox": 0.13978, "loss": 0.32956, "time": 0.16739}
{"mode": "train", "epoch": 1, "iter": 230, "lr": 0.0025, "memory": 3467, "data_time": 0.0071, "loss_rpn_cls": 0.00219, "loss_rpn_bbox": 0.00354, "loss_cls": 0.20871, "acc": 95.52734, "loss_bbox": 0.17335, "loss": 0.38778, "time": 0.16307}
{"mode": "train", "epoch": 1, "iter": 240, "lr": 0.0025, "memory": 3467, "data_time": 0.00708, "loss_rpn_cls": 0.0034, "loss_rpn_bbox": 0.00543, "loss_cls": 0.20322, "acc": 95.92773, "loss_bbox": 0.1597, "loss": 0.37175, "time": 0.16611}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.0025, "memory": 3467, "data_time": 0.00767, "loss_rpn_cls": 0.00233, "loss_rpn_bbox": 0.00573, "loss_cls": 0.18095, "acc": 96.17188, "loss_bbox": 0.14306, "loss": 0.33207, "time": 0.16404}
{"mode": "train", "epoch": 1, "iter": 260, "lr": 0.0025, "memory": 3467, "data_time": 0.00842, "loss_rpn_cls": 0.00248, "loss_rpn_bbox": 0.00408, "loss_cls": 0.1934, "acc": 95.86914, "loss_bbox": 0.15759, "loss": 0.35755, "time": 0.16495}
{"mode": "train", "epoch": 1, "iter": 270, "lr": 0.0025, "memory": 3467, "data_time": 0.00723, "loss_rpn_cls": 0.00333, "loss_rpn_bbox": 0.00663, "loss_cls": 0.19211, "acc": 95.68359, "loss_bbox": 0.16707, "loss": 0.36915, "time": 0.16935}
{"mode": "train", "epoch": 1, "iter": 280, "lr": 0.0025, "memory": 3467, "data_time": 0.00645, "loss_rpn_cls": 0.00363, "loss_rpn_bbox": 0.00416, "loss_cls": 0.19925, "acc": 95.83984, "loss_bbox": 0.15926, "loss": 0.36629, "time": 0.16888}
{"mode": "train", "epoch": 1, "iter": 290, "lr": 0.0025, "memory": 3467, "data_time": 0.00726, "loss_rpn_cls": 0.00294, "loss_rpn_bbox": 0.00646, "loss_cls": 0.19531, "acc": 95.80078, "loss_bbox": 0.15886, "loss": 0.36358, "time": 0.17077}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0025, "memory": 3467, "data_time": 0.00725, "loss_rpn_cls": 0.00169, "loss_rpn_bbox": 0.00446, "loss_cls": 0.19681, "acc": 95.81055, "loss_bbox": 0.15713, "loss": 0.36009, "time": 0.16569}
{"mode": "train", "epoch": 1, "iter": 310, "lr": 0.0025, "memory": 3467, "data_time": 0.00657, "loss_rpn_cls": 0.00107, "loss_rpn_bbox": 0.00398, "loss_cls": 0.20505, "acc": 95.5957, "loss_bbox": 0.16801, "loss": 0.37811, "time": 0.15902}
{"mode": "train", "epoch": 1, "iter": 320, "lr": 0.0025, "memory": 3467, "data_time": 0.00676, "loss_rpn_cls": 0.00305, "loss_rpn_bbox": 0.00465, "loss_cls": 0.20135, "acc": 95.77148, "loss_bbox": 0.15966, "loss": 0.36871, "time": 0.16189}
{"mode": "train", "epoch": 1, "iter": 330, "lr": 0.0025, "memory": 3467, "data_time": 0.00736, "loss_rpn_cls": 0.00144, "loss_rpn_bbox": 0.00301, "loss_cls": 0.19588, "acc": 95.74219, "loss_bbox": 0.15676, "loss": 0.35709, "time": 0.16144}
{"mode": "train", "epoch": 1, "iter": 340, "lr": 0.0025, "memory": 3467, "data_time": 0.00723, "loss_rpn_cls": 0.0004, "loss_rpn_bbox": 0.00295, "loss_cls": 0.19255, "acc": 95.74219, "loss_bbox": 0.15888, "loss": 0.35478, "time": 0.16585}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.0025, "memory": 3467, "data_time": 0.00729, "loss_rpn_cls": 0.00105, "loss_rpn_bbox": 0.00527, "loss_cls": 0.21491, "acc": 95.23438, "loss_bbox": 0.17679, "loss": 0.39803, "time": 0.16712}
{"mode": "train", "epoch": 1, "iter": 360, "lr": 0.0025, "memory": 3467, "data_time": 0.00752, "loss_rpn_cls": 0.00119, "loss_rpn_bbox": 0.0037, "loss_cls": 0.20333, "acc": 95.3125, "loss_bbox": 0.17514, "loss": 0.38336, "time": 0.16947}
{"mode": "train", "epoch": 1, "iter": 370, "lr": 0.0025, "memory": 3467, "data_time": 0.00777, "loss_rpn_cls": 0.01861, "loss_rpn_bbox": 0.01337, "loss_cls": 0.20641, "acc": 95.3418, "loss_bbox": 0.16363, "loss": 0.40202, "time": 0.17895}
{"mode": "train", "epoch": 1, "iter": 380, "lr": 0.0025, "memory": 3467, "data_time": 0.0079, "loss_rpn_cls": 0.00589, "loss_rpn_bbox": 0.00681, "loss_cls": 0.22559, "acc": 95.12695, "loss_bbox": 0.18033, "loss": 0.41862, "time": 0.17261}
{"mode": "train", "epoch": 1, "iter": 390, "lr": 0.0025, "memory": 3467, "data_time": 0.00732, "loss_rpn_cls": 0.0015, "loss_rpn_bbox": 0.00549, "loss_cls": 0.17877, "acc": 96.00586, "loss_bbox": 0.14739, "loss": 0.33316, "time": 0.16997}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0025, "memory": 3467, "data_time": 0.00731, "loss_rpn_cls": 0.00384, "loss_rpn_bbox": 0.0047, "loss_cls": 0.18742, "acc": 95.88867, "loss_bbox": 0.15067, "loss": 0.34663, "time": 0.17224}
{"mode": "train", "epoch": 1, "iter": 410, "lr": 0.0025, "memory": 3467, "data_time": 0.00758, "loss_rpn_cls": 0.00531, "loss_rpn_bbox": 0.00383, "loss_cls": 0.2022, "acc": 95.56641, "loss_bbox": 0.16322, "loss": 0.37456, "time": 0.16731}
{"mode": "train", "epoch": 1, "iter": 420, "lr": 0.0025, "memory": 3467, "data_time": 0.00756, "loss_rpn_cls": 0.00349, "loss_rpn_bbox": 0.00515, "loss_cls": 0.21853, "acc": 95.18555, "loss_bbox": 0.17435, "loss": 0.40152, "time": 0.17082}
{"mode": "train", "epoch": 1, "iter": 430, "lr": 0.0025, "memory": 3467, "data_time": 0.00737, "loss_rpn_cls": 0.00086, "loss_rpn_bbox": 0.00417, "loss_cls": 0.22292, "acc": 95.0293, "loss_bbox": 0.17422, "loss": 0.40217, "time": 0.17302}
{"mode": "train", "epoch": 1, "iter": 440, "lr": 0.0025, "memory": 3467, "data_time": 0.00753, "loss_rpn_cls": 0.00491, "loss_rpn_bbox": 0.00694, "loss_cls": 0.2101, "acc": 95.24414, "loss_bbox": 0.16531, "loss": 0.38726, "time": 0.17174}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0025, "memory": 3467, "data_time": 0.00694, "loss_rpn_cls": 0.00188, "loss_rpn_bbox": 0.00527, "loss_cls": 0.2221, "acc": 95.20508, "loss_bbox": 0.16667, "loss": 0.39593, "time": 0.16257}
{"mode": "train", "epoch": 1, "iter": 460, "lr": 0.0025, "memory": 3467, "data_time": 0.00725, "loss_rpn_cls": 0.00343, "loss_rpn_bbox": 0.00497, "loss_cls": 0.21759, "acc": 95.27344, "loss_bbox": 0.15825, "loss": 0.38424, "time": 0.16638}
{"mode": "train", "epoch": 1, "iter": 470, "lr": 0.0025, "memory": 3467, "data_time": 0.00713, "loss_rpn_cls": 0.00123, "loss_rpn_bbox": 0.00396, "loss_cls": 0.22068, "acc": 94.99023, "loss_bbox": 0.16184, "loss": 0.3877, "time": 0.16297}
{"mode": "train", "epoch": 1, "iter": 480, "lr": 0.0025, "memory": 3467, "data_time": 0.00738, "loss_rpn_cls": 0.00139, "loss_rpn_bbox": 0.00386, "loss_cls": 0.243, "acc": 94.49219, "loss_bbox": 0.16771, "loss": 0.41596, "time": 0.1675}
{"mode": "train", "epoch": 1, "iter": 490, "lr": 0.0025, "memory": 3467, "data_time": 0.00716, "loss_rpn_cls": 0.00131, "loss_rpn_bbox": 0.00334, "loss_cls": 0.23755, "acc": 94.56055, "loss_bbox": 0.16563, "loss": 0.40782, "time": 0.16909}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0025, "memory": 3467, "data_time": 0.00712, "loss_rpn_cls": 0.0007, "loss_rpn_bbox": 0.00421, "loss_cls": 0.23987, "acc": 94.73633, "loss_bbox": 0.15847, "loss": 0.40325, "time": 0.17265}
{"mode": "train", "epoch": 1, "iter": 510, "lr": 0.0025, "memory": 3467, "data_time": 0.00716, "loss_rpn_cls": 0.00096, "loss_rpn_bbox": 0.00485, "loss_cls": 0.21504, "acc": 95.03906, "loss_bbox": 0.1465, "loss": 0.36736, "time": 0.17667}
{"mode": "train", "epoch": 1, "iter": 520, "lr": 0.0025, "memory": 3467, "data_time": 0.00629, "loss_rpn_cls": 0.00594, "loss_rpn_bbox": 0.00439, "loss_cls": 0.23548, "acc": 95.16602, "loss_bbox": 0.13952, "loss": 0.38533, "time": 0.16454}
{"mode": "train", "epoch": 1, "iter": 530, "lr": 0.0025, "memory": 3467, "data_time": 0.00658, "loss_rpn_cls": 0.00162, "loss_rpn_bbox": 0.00501, "loss_cls": 0.26238, "acc": 94.46289, "loss_bbox": 0.15474, "loss": 0.42374, "time": 0.17095}
{"mode": "train", "epoch": 1, "iter": 540, "lr": 0.0025, "memory": 3467, "data_time": 0.00732, "loss_rpn_cls": 0.00103, "loss_rpn_bbox": 0.00668, "loss_cls": 0.237, "acc": 94.69727, "loss_bbox": 0.13698, "loss": 0.38169, "time": 0.1636}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.0025, "memory": 3467, "data_time": 0.00715, "loss_rpn_cls": 0.00499, "loss_rpn_bbox": 0.00546, "loss_cls": 0.25468, "acc": 94.77539, "loss_bbox": 0.12622, "loss": 0.39134, "time": 0.11056}
{"mode": "train", "epoch": 1, "iter": 560, "lr": 0.0025, "memory": 3467, "data_time": 0.00733, "loss_rpn_cls": 0.00325, "loss_rpn_bbox": 0.0053, "loss_cls": 0.21603, "acc": 94.9707, "loss_bbox": 0.12008, "loss": 0.34465, "time": 0.10835}
{"mode": "train", "epoch": 1, "iter": 570, "lr": 0.0025, "memory": 3467, "data_time": 0.00757, "loss_rpn_cls": 0.00083, "loss_rpn_bbox": 0.00516, "loss_cls": 0.27008, "acc": 93.82812, "loss_bbox": 0.13842, "loss": 0.41449, "time": 0.10735}
{"mode": "train", "epoch": 1, "iter": 580, "lr": 0.0025, "memory": 3467, "data_time": 0.00742, "loss_rpn_cls": 0.00104, "loss_rpn_bbox": 0.00537, "loss_cls": 0.23712, "acc": 94.80469, "loss_bbox": 0.11662, "loss": 0.36015, "time": 0.10981}
{"mode": "train", "epoch": 1, "iter": 590, "lr": 0.0025, "memory": 3467, "data_time": 0.00693, "loss_rpn_cls": 0.00104, "loss_rpn_bbox": 0.00555, "loss_cls": 0.23154, "acc": 94.79492, "loss_bbox": 0.12751, "loss": 0.36564, "time": 0.10615}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0025, "memory": 3467, "data_time": 0.00681, "loss_rpn_cls": 0.00166, "loss_rpn_bbox": 0.00574, "loss_cls": 0.22045, "acc": 95.10742, "loss_bbox": 0.10403, "loss": 0.33188, "time": 0.10664}
{"mode": "train", "epoch": 1, "iter": 610, "lr": 0.0025, "memory": 3467, "data_time": 0.00695, "loss_rpn_cls": 0.00066, "loss_rpn_bbox": 0.00576, "loss_cls": 0.2262, "acc": 94.77539, "loss_bbox": 0.11499, "loss": 0.34761, "time": 0.10477}
{"mode": "train", "epoch": 1, "iter": 620, "lr": 0.0025, "memory": 3467, "data_time": 0.0067, "loss_rpn_cls": 0.00147, "loss_rpn_bbox": 0.00452, "loss_cls": 0.26907, "acc": 94.12109, "loss_bbox": 0.11585, "loss": 0.39091, "time": 0.10565}
{"mode": "train", "epoch": 1, "iter": 630, "lr": 0.0025, "memory": 3467, "data_time": 0.00636, "loss_rpn_cls": 0.00376, "loss_rpn_bbox": 0.00675, "loss_cls": 0.23875, "acc": 94.88281, "loss_bbox": 0.11665, "loss": 0.36591, "time": 0.10255}
{"mode": "train", "epoch": 1, "iter": 640, "lr": 0.0025, "memory": 3467, "data_time": 0.00783, "loss_rpn_cls": 0.00101, "loss_rpn_bbox": 0.00465, "loss_cls": 0.24093, "acc": 94.60938, "loss_bbox": 0.10489, "loss": 0.35149, "time": 0.14653}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.0025, "memory": 3467, "data_time": 0.00841, "loss_rpn_cls": 0.00137, "loss_rpn_bbox": 0.00446, "loss_cls": 0.23808, "acc": 94.70703, "loss_bbox": 0.12123, "loss": 0.36513, "time": 0.19535}
{"mode": "train", "epoch": 1, "iter": 660, "lr": 0.0025, "memory": 3467, "data_time": 0.00816, "loss_rpn_cls": 0.00016, "loss_rpn_bbox": 0.00485, "loss_cls": 0.23149, "acc": 94.58008, "loss_bbox": 0.11509, "loss": 0.35158, "time": 0.20551}
